# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Serre2dc', [dirname(__file__)])
        except ImportError:
            import _Serre2dc
            return _Serre2dc
        if fp is not None:
            try:
                _mod = imp.load_module('_Serre2dc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Serre2dc = swig_import_helper()
    del swig_import_helper
else:
    import _Serre2dc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def mallocPy(*args):
  return _Serre2dc.mallocPy(*args)
mallocPy = _Serre2dc.mallocPy

def writetomem(*args):
  return _Serre2dc.writetomem(*args)
writetomem = _Serre2dc.writetomem

def readfrommem(*args):
  return _Serre2dc.readfrommem(*args)
readfrommem = _Serre2dc.readfrommem

def deallocPy(*args):
  return _Serre2dc.deallocPy(*args)
deallocPy = _Serre2dc.deallocPy

def ReconLin(*args):
  return _Serre2dc.ReconLin(*args)
ReconLin = _Serre2dc.ReconLin

def ReconQuart(*args):
  return _Serre2dc.ReconQuart(*args)
ReconQuart = _Serre2dc.ReconQuart

def evolvewrapForcingANA(*args):
  return _Serre2dc.evolvewrapForcingANA(*args)
evolvewrapForcingANA = _Serre2dc.evolvewrapForcingANA

def getufromG(*args):
  return _Serre2dc.getufromG(*args)
getufromG = _Serre2dc.getufromG

def ReconZero(*args):
  return _Serre2dc.ReconZero(*args)
ReconZero = _Serre2dc.ReconZero

def RegSplit(*args):
  return _Serre2dc.RegSplit(*args)
RegSplit = _Serre2dc.RegSplit

def getufromGsplit(*args):
  return _Serre2dc.getufromGsplit(*args)
getufromGsplit = _Serre2dc.getufromGsplit

def readfrom2DmemINT(*args):
  return _Serre2dc.readfrom2DmemINT(*args)
readfrom2DmemINT = _Serre2dc.readfrom2DmemINT

def ReconandSolve(*args):
  return _Serre2dc.ReconandSolve(*args)
ReconandSolve = _Serre2dc.ReconandSolve

def HankEnergyall(*args):
  return _Serre2dc.HankEnergyall(*args)
HankEnergyall = _Serre2dc.HankEnergyall

def uhall(*args):
  return _Serre2dc.uhall(*args)
uhall = _Serre2dc.uhall

def hall(*args):
  return _Serre2dc.hall(*args)
hall = _Serre2dc.hall

def Gall(*args):
  return _Serre2dc.Gall(*args)
Gall = _Serre2dc.Gall
# This file is compatible with both classic and new-style classes.


